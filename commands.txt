episode 5

git have 3 part

working directory
staging area
head our repository

episode 7

git inint command for add git to project

for show .git folder in vscode press ctrl + p and search >setting and select default settings json file and search .git and false this

episode 8

Untracked = there is file in working directory = U
Index added = there is file in staging area = A
Modified = there is file in staging area but changed = M

git status show you wich files on staging area our working directory our wich file changed and modified
git add {file name} added your file to staging area
git add . added your all files {modified in staging area and untracked} to staging area

episode 9

git rm --cached leve file in staging area

episode 10

git commit add a comment our discriptioin to your change in code too better undrestand your changes

episode 11

git log show git commits with user and id and commit and date

git log --oneline show git commits only and id becuse is tiny

episode 12

git flags is --stat --graph --oneline ,...
git flags can be with togather use

git log --stat show show you what is changed in your code
git log --graph show clean your commit and better
git log --affter="24-02-15" show your commits affter 2024-02-15
git log --before="24-02-15" show your commits before 2024-02-15
git log --author="userName" show userName commits to you

episode 13

for fast add and commit with togather you can use git commit -am "MASAGE" instead of git add and git commit -m "MASAGE"

episode 14

git show "COMMIT ID" show yout what happend in this commit

only git show show information the last your commit

episode 15

git config --local alias."YOUR SHORTCUTS" "GIT COMMAND WITHOUT GIT"
git config --local set your shortcuts in your project but --global set in your system

for see git shortcuts you can try git config --global --get-regexp alias
and for delete shortcuts you can try git config --global --unset alias."YOUR SHORTCUT"

episode 16

branch is a solotion for better undrestanding and was cleaning project from many commit

episode 17

git branch show to you, your branchs
git branch YOUR BRANCH NAME created new branch
git switch YOUR BRANCH NAME switched to your branch

episode 18

git -d YOUR BRANCH NAME deleted branch
git branch -c YOUR BRANCH NAME created branch and switched to this branch
for example git -d hello when to work be we are not to hello branch
if git -d hello doesn't work we can use git -D hello for delete branch

episode 19

if you want to create a branch in your costum branch sholde switched to your branch and created new branch becuse create new branch in branch master just create a new branch no create branch in your costum branch

git branch -m rename NEW BRANCH NAME your branch

episode 20 install gitlens extension

episode 21 fast forward merge

for marge in repository then they branch master not change we use fast forward merge
git switched master
git merge hello
next we can delete branch next merge

episode 22 git non fast forward merge

non fast forward merge when happening be we are merge hello branch in branch master but master updeted and non fast forward merging need to message just like git commit


episode 23 how to solving confilict in git merge

for solving confilict in git merge you must edit two result for merge and to end commited merge

episode 24 best practice merge

1.you should use from a branch for a work not more
2.you should try faster to merge your branch becuse maybe branch master updated and confilict happened.

episode 25 semantic commit massage

semantic commit massage is a best practice for commenting beter in the git

episode 26 git diff

git diff do a comparison between staging area and working directory for to show what changed in affter and before

episode 27 git diff --staged

git diff --stagaed show comparison between staging area and last commit

episode 28 git diff HEAD/head

git diff HEAD/head show changes between working directory and last commit

episode 29 git diff branch and commit

git diff COMMITID..COMMITID our BRANCHNAME..BRANCHNAME can show you what is changed in this parameters

you can use space instead of ..

you can use file name in the last line for see only changes in this file

episode 30 git ignore

.gitignore file access you to choise files should not process in git

you can writing files/folders/regex for unselected git

gitignore.io show you a list for each library and framwork file to need use in .gitignore file

episode 31 git checkout

git checkout COMMITID bring you to this commit and show you what happend and what changed

you can see just a file with git checkout COMMITID FILENAME

for exit in checkout just switched to your branch our use this command git switch -

if you see a file with git checkout and not exited your head in commit just again try git checkout without file name and next switched to your branch

for see all log and commit in git checkout just use git log with --all flag

you can see NUMBER last your commit with git checkout HEAD/head~NUMBER

episode 32 git checkout HEAD/head

git checkout HEAD FILENAME delete changes in working directory
git checkout HEAD . delete changes in working directory

episode 33 git restore

git restore FILENAME give you access for delete every changes in FILENAME in working directory and back to head

git restore --staged FILENAME give you access for leave FILENAME in staged

you can use . for all files

episode 34 git restore --source

you can restore to your COMMIT with git restore --source COMMITID FILENAME

you can use HEAD/head~NUMBER in git restore --source

episode 35 git clean

git clean -flags FILENAME deleted file in whole project for ever

git clean flags
-f => force
-d => remove in whole directory
-h => for help about git clean flags

episode 36 & 37 git reset

git reset is a dangerous

git reset --soft COMMITID leave your changes from repository to stage
git reset --mixed COMMITID leave your changes from repository to working directory

git reset COMMITID = git reset --mixed COMMITID

episode 38 git reset part 2

git reset --hard COMMITID  leave your changes from repository and delete install

episode 39 git revert

git revert COMMITID create new commit and in that reversed every change in COMMIT, actually delete every change in commit in new tempelate

episode 40 confilict in git revert & git revert flags

you can use git revert for last commit becuse using git revert in past commits created confilict becuse might afterward commits have dependency

confilict when happend you try revert file is not created so you get confilict error

git revert flags

--no-edit give not to you access to edit revert commit
--edit give you access to edit revert commit

episode 41 git status -s

git status -s show status you but short

episode 46 connect repository to github

git remote add REMOTENAME REPOSITORYLINK connect your repository to github repository

also default REMOTENAME is origin

git branch -M NEWBRANCHNAME rename master branch because now main is the defualt name for branch master in github

also defualt NEWBRANCHNAME is master for old and for now is main

git push -u REMOTENAME NEWBRANCHNAME send your repository from your system to github repository

episode 47 git remote

git remote show you your remotes

git remote -v show you you rometes but with details

git remote remove REMOTENAME deleted REMOTENAME than remotes

episode 48 git push

git push REMOTENAME BRANCHNAME we can send last change in system to github repository with this command

git push -u REMOTENAME BRANCHNAME you can with this commit shortest git push REMOTENAME BRANCHNAME to git push for ever

episode 49 git pull

git pull REMOTENAME BRANCHNAME get new changes from github and put in you directory

git pull without REMOTENAME BRANCHNAME work just like git pull REMOTENAME BRANCHNAME

episode 50 git fetch

git fetch give new changes from remote but dont sync with your code you can with creat a new branch access this so lock at down

git branch -r show you if there is changes a new remote branch

git switcch -c BRANCHNAME origin/master you can with this command access this changes with create a new branch

episode 53 confilict in git pull

if you hava confilict in git pull you can handle own in git lens pull

episode 54 README.md

readme to mean Read me
.md to mean markdown

markdown a language for showing just like html xml

you can h1 tag in readme with # and ## and ... and ######

for using hr tag in readme you can use ___ our ---

you can use p tag with an without <p></p> command

you can hilight your text in backtick => `code`

you can show codeSection with 3 backtick => ```LANGUAGENAME
your code
```
you can dont writing LANGUAGENAME and show codeSection with white color

you can show order list => 1.code
                                       2.code
                                       3.code
                                           1.code
                                           2.code
                                       4.code

and you can use nestet list

you can show unorder list like this

- code
- code
- code
    -code
    -code
- code

episode 55 img and link in README.md file

you can put links with [LINKNAME](HREF) command in your repository

you can put img with ![IMAGENAME](HREF)  command in your repository

episode 56 badge in readme

you can find your badge in this repository

https://github.com/alexandresanlim/Badges4-README.md-Profile

and using at like it

![ALT](URL)

and you can using and learn it from Shields.io

episode 57 readme.so

you can create readme files with readme.so site easy and fast without any need to markdown command

episode 58 github pages

you can create a online demo for your static project in github with using github pages in setting section of your repository.

point : is better to put your github pages link in your projects readme

episode 59 private repository

you can see your local github account with git config user.name

episode 60 invite collaborator in github

at first you should invite your work partner to repo from repo setting > access > collaborator
and then your partner should accept this in her/his github account or accept this in invite email

episode 61 issue

you can create issues for asking questions or report a bug or request a feature in a repository
even you can using assignees for tag people or labels for show your mean better
and at last you can close issues after ending that and clear your repository issues section

episode 62 using issues in team

you can give task to your partner in github as way github issue
at firs you should using assignees option in issue to give task to your partner
second when your partner see your issue and fix your task, can commit that with #ISSUEID in commit massage and then you can see issue is closed

episode 63 using pull request in team

what is pull request ? actually this is a feature for send codes to boss. whenever you writing a code and you need to check it with you boss you can send a pull request.
pull request usally using for codes that are not safe or we haven't sure about it yet and we need some person read that and accept that to we marge it in master branch.
at first whenever you would to write a code some like that you should create a new branch and writing your codes and then commit it. after that you need to marge it in your repository but you can't coz this isn't your repository and your remote repository isn't exist so you have to write this git push -u origin YOURBRANCHNAME or git push --set-upstream origin YOURBRANCHNAME and then you have to go in github repository and create a pull request. in repository in pull request section create a pull request and chose the YOURBRANCHNAME and write a commit for that and then send it.whenever your boss accept it your changes applied in master. after that you can delete branch in your repository and for deleting your branch from remote repository you can use this command git push origin --delete YOURBRANCHNAME

episode 64 confilict in pull request

when you push a branch in github repo as pull request maybe get a confilict and then you need fix it with github through pull request section => confilict solve button

episode 65 fork

you can using fork button for create a copy of the repo for yourself or copy and send a pull request for a project that you haven't access to that until they push your code in their project or repo

episode 66 push on a fork repo

when you want have a participate a repo at firs you need fork it and then you should create a new branch and save your changes in this branch not master branch, it's that why if you save your changes in master branch in merge time maybe to many people want send a pull request and maybe they get to many confilict. 

episode 67 send pull request through fork

after push on your fork repo you can send a pull request for main repo. you should just click in create pull request button and chose branch and send it and wite for it to merged.

episode 68 git pull from a fork repo

what happend if we fork a repo and change it and in this time main repo updated ? can we still push it ? yeh, we can but get a ridiculous confilict, so you have to add a remote to your forked repository.
for add remote you just should write this  git remote add REMOTENAME GITREMOTEADDRESS
usally we use upstream name for remote name in forked repository's
and after all this you can get git pull from main repo with this command : git pull upstream

episode 76 tricks in markdown language

for bolding a text you need just use two * or _ after and before your text
for do italic a text you need just use one * or _ after and before your text
for do italic and bold a text you need just use three * or _ after and before your text
you can show text with hilight and background just with using down way
> your menual text and your `hilight text`
you can see what diffrence between two codes in markdown language like this
```diff
- your deleted code
+ your new code
```
you can use html tags in markdown language
you can create a table in markdown language like this
| Col 1| Col 2 |
| -- | -- |
| Row 1 Col 1| Row Col 2 |

episode 85 git commit amend

when you want add a change in your last commit and you don't want to use git reset to delete last commit an make an new commit, you can use git commit --all --amend and all of your changes added in your last commit
your can use git commit -a --amend too
if mybe don't working in terminal so just try to use that in your code editro with extension